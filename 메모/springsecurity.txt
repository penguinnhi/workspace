spring security 
- 인증 및 인가를 담당하고 관리하는 스프링의 하위 프레임워크

- 인증(Authentication) : 누군데 
인증은 사용자의 신원을 입증하는 과정입니다. 
쉽게 말하면 어떤 사이트에 아이디와 비밀번호를 입력하여 
로그인 하는 과정입니다.

- 인가(Authorization) : 머 할 수 있는데 
'권한부여'나 '허가'와 같은 의미로 사용됩니다. 
즉, 어떤 대상이 특정 목적을 실현하도록 허용(Access) 하는 것을 의미합니다. 
예를 들면, 파일 공유 시스템에서 권한별로 접근할 수 있는 폴더가 상이합니다. 
관리자는 접속이 가능하지만 
일반 사용자는 접속할 수 없는 경우에서 사용자의 권한을 확인하게 되는데, 
이 과정을 인가라고 합니다.


JWT 토큰이란?
- 암호화된 문자열
JWT(Json Web Token)은 
Json 객체에 인증에 필요한 정보들을 담은 후 
비밀키로 서명한 토큰으로, 인터넷 표준 인증 방식이다. 
공식적으로 인증(Authentication) & 권한허가(Authorization) 방식으로 사용된다.


UsernamePasswordAuthenticationFilter
인증 관리자
폼 기반 로그인시 사용되는 필터로 아이디, 비밀번호 테이터를 파싱하여 인증 요청을 위임
인증이 성공하면 successHandler, 실패하면 failureHandler를 실행


client(react)에서 받은 토큰을 저장할 위치
1. 변수에 저장
- 코드가 직관적, 상대적으로 보안이 좋다 
- 새로고침하면 로그인정보가 사라짐 > 이 문제를 해결하도록 코드 수정 필요

2. 웹 스토리지에 저장( 자바(백서버)-데이터베이스, react(javascript)-웹 스토리지 )
 ㄴ sessionStorage
  - 브라우저가 꺼지면 데이터 사라짐
  - 브라우저의 탭끼리 데이터 공유 안됨 
  - xss(Cross Site Scripting) 공격에 취약 

 ㄴ localStorage ! 
  - 브라우저가 꺼져도 데이터 사라지지않음
  - pc가 꺼져도 데이터 사라지지않음 
  - 단, 영구 보존 / 시간이 지나도 자동 소멸 안됨(데이터 삭제는 직접적 코드로 삭제 명령어 작성) 
  - 브라우저의 탭끼리 데이터 공유 됨
  - xss(Cross Site Scripting) 공격에 취약 

3. cookie에 저장 ! 
 - 클라이언트 pc에 데이터 저장
 - pc를 꺼도 데이터 사라지지않고 탭끼리 데이터 공유 가능
 - 새로고침해도 사라지지 않음
 - 쿠키 만료 기간을 지정하지 않으면 브라우저 종료 시 데이터 삭제 
 - 자바 스크립트 코드로 쿠키의 데이터를 컨트롤 못하게 설정 가능 
 - csrf 공격에 취약 


LocalStorage vs Cookie 
 1. 데이터 저장공간 : local >> cookie 
🌟 2. 쿠키는 데이터의 저장 시간 설정 가능, 로컬 스토리지는 시간 설정 불가능 
🌟 3.  쿠키에 저장된 데이터는 서버로 요청 시 무조건 전달 됨 (데이터 전달에 대한 컨트롤 불가)
         로컬 스토리지에 저장된 데이터는 개발자가 필요 시에만 요청에 추가. 


session과 cookie 의 차이점 (웹 개발에서 백서버를 의미
 - 백 서버의 session과 프론트의 sessionStorage는 다름 
 - 여기서 말하는 cookie는 프론트의 쿠키와 동일 
 - 웹 스토리지와 차이점 : 웹 스토리지는 프론트 전용 저장 공간 -> 웹 스토리지를 컨트롤하는 코드가 자바에 없음 / 쿠키는 백단에서 컨트롤 가능 
 - session : 서버에 위치한 저장 공간
 - cookie : 클라이언트에 위치한 저장 공간 



현재 token 방식은 보완 필요
- 토큰의 만료 기간을 최대한 짧게 잡는다. (10분 / xss 공격에 약함 )
- 토큰을 두 개( access Token-10분, refresh Token )로 구분해서 사용 



