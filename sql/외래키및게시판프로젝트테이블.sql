
-- 데이터베이스에서 키 종류
-- KEY : 데이터베이스에서 각 행을 구분하는 식별자를 의미
-- SUPER KEY : 하나의 행을 식별할 수 있는 하나 이상의 컬럼 
-- 후보키 CANDIDTAE KEY : 기본 키가 될 수 있는 후보
-- 기본키 PRIMARY KEY : 후보키 중에 각 행을 구분짓기 위해 결정한 키
-- 대체키 ALTERNATE KEY : 후보키 중에서 기본키를 제외한 키
-- 외래키 FOREIGN KEY : 다른 테이블의 기본키로 사용되는 키 

-- 로그인, 게시글, 댓글 관련 기능 포함 게시판 프로젝트 
-- 테이블 : 회원정보 , 게시글정보, 댓글 정보 

-- 회원정보 
-- USER:일반회원 , ADMIN:관리자 
CREATE TABLE BOARD_MEMBER (
	MEM_ID VARCHAR(50) PRIMARY KEY
	, MEM_PW VARCHAR(50) NOT NULL
	, MEM_NAME VARCHAR(50) NOT NULL
	, GENDER VARCHAR(10) 
	, MEM_ROLE VARCHAR(20) DEFAULT 'USER'	
);

SELECT * FROM board_member;
DELETE FROM board_member WHERE MEM_ID='kaka';

-- 임시 회원데이터 
INSERT INTO BOARD_MEMBER (
	MEM_ID
	, MEM_PW
	, MEM_NAME
	, GENDER
	, MEM_ROLE
) VALUES (
	'눈을떠'
	,'123'
	,'소릴높여봐'
	,'female'
	,'USER'
);
INSERT INTO BOARD_MEMBER (
	MEM_ID
	, MEM_PW
	, MEM_NAME
	, GENDER
	, MEM_ROLE
) VALUES (
	'admin'
	,'321'
	,'관리자'
	,'female'
	,'ADMIN'
);


-- 게시판 정보
-- 로그인 한 회원만 게시글 작성 가능
CREATE TABLE BOARD (
	BOARD_NUM INT PRIMARY KEY AUTO_INCREMENT
	,TITLE VARCHAR(50) NOT NULL
	,CONTENT VARCHAR(100)
	,MEM_ID VARCHAR(50) REFERENCES BOARD_MEMBER (MEM_ID) -- 외래키 
	,CREATE_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
);

SELECT * FROM BOARD;

-- 임시 게시글 데이터 
INSERT INTO BOARD (TITLE, CONTENT, MEM_ID) 
VALUES ('그래그리쉽지는않겠지','나를허락해준세상이란','눈을떠');
INSERT INTO BOARD (TITLE, CONTENT, MEM_ID) 
VALUES ('손쉽게다가오는지','편하고도감미로운공간은아냐','눈을떠');
INSERT INTO BOARD (TITLE, CONTENT, MEM_ID) 
VALUES ('그래도날아오를거야','어쩌구저쩌구꿈을담아','ADMIN');
INSERT INTO BOARD (TITLE, CONTENT, MEM_ID) 
VALUES ('노래가사임','암튼그럼','hihi');

-- 댓글 정보 (회원만 가능)
CREATE TABLE BOARD_REPLY (
	REPLY_NUM INT PRIMARY KEY AUTO_INCREMENT
	,BOARD_NUM INT REFERENCES BOARD (BOARD_NUM) 
	,REPLY_CONTENT VARCHAR(50) NOT NULL
	,MEM_ID VARCHAR(50) REFERENCES BOARD_MEMBER (MEM_ID)
	,REPLY_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
);

SELECT * FROM BOARD_REPLY;
DELETE FROM BOARD_REPLY;

-- 임시 댓글 데이터
INSERT INTO BOARD_REPLY (REPLY_CONTENT,MEM_ID,BOARD_NUM) VALUES ('아침에눈을뜨면','눈을떠',1);
INSERT INTO BOARD_REPLY (REPLY_CONTENT,MEM_ID,BOARD_NUM) VALUES ('오늘은어떤사건이날부를까','눈을떠',1);
INSERT INTO BOARD_REPLY (REPLY_CONTENT,MEM_ID,BOARD_NUM) VALUES ('모두들어렵다고모두들안된다고','ADMIN',1);
INSERT INTO BOARD_REPLY (REPLY_CONTENT,MEM_ID,BOARD_NUM) VALUES ('지난밤이궁금해','ADMIN',2);

-- 데이터 조회
-- 회원의 이름이 눈을떠 인 회원이 작성한 게시글의 글번호, 제목, 작성자ID,작성자 이름 조회 
-- 작성일 기준 최신글 정렬 내림차순
SELECT BOARD.BOARD_NUM, BOARD.TITLE, BOARD.MEM_ID, BOARD_MEMBER.MEM_NAME
FROM BOARD,BOARD_MEMBER
WHERE BOARD_MEMBER.MEM_NAME='소릴높여봐' AND BOARD.MEM_ID=BOARD_MEMBER.MEM_ID
ORDER BY CREATE_DATE DESC;

-- 모든 글의 글 번호, 제목, 작성자 및 해당 글에 작성된 댓글의 댓글내용 , 댓글 작성자 댓글 작성일 조회
-- 게시글 번호 기준 최신순으로 정렬 후 같은 게시글에 대한 댓글은 가장 최근에 달린 댓글 순으로 조회
SELECT BOARD.BOARD_NUM, BOARD.TITLE, BOARD.MEM_ID, 
	BOARD_REPLY.REPLY_CONTENT, BOARD_REPLY.MEM_ID, BOARD_REPLY.REPLY_DATE
FROM BOARD,BOARD_REPLY
WHERE BOARD.BOARD_NUM=BOARD_REPLY.BOARD_NUM
ORDER BY BOARD.BOARD_NUM DESC, BOARD_REPLY.REPLY_DATE DESC;


-- 아이디가 자바인 회원이 작성한 게시글의 글 제목,내용,작성자id,작성자명,권한을 조회
SELECT B.TITLE,B.CONTENT,M.MEM_ID,M.MEM_NAME,M.MEM_ROLE
FROM board B,board_member M
WHERE M.MEM_ID='hihi' AND M.MEM_ID=B.MEM_ID; 

-- 글번호가 5번이하인 게시글의 글 번호 제목 글작성자 이름를 조회
-- 글번호 기준 오름차순 정렬
SELECT B.BOARD_NUM,TITLE,MEM_NAME
FROM board B, board_member M
WHERE B.BOARD_NUM<=5
AND B.MEM_ID=M.MEM_ID
ORDER BY B.BOARD_NUM; 

-- 1번 게시글의 게시글 제목, 작성자ID 및 1번 게시글에 작성된 댓글내용,댓글작성자ID
SELECT TITLE,B.MEM_ID,REPLY_CONTENT,R.MEM_ID
FROM board B,board_reply R
WHERE B.BOARD_NUM=1 
AND B.BOARD_NUM=R.BOARD_NUM;


-- 1번 게시글의 게시글 제목, 작성자ID 및 
-- 1번 게시글에 작성된 댓글내용,댓글작성자ID,댓글 작성자이름
SELECT TITLE,B.MEM_ID,REPLY_CONTENT,R.MEM_ID,M.MEM_NAME
FROM board B,board_member M,board_reply R
WHERE B.BOARD_NUM=R.BOARD_NUM
AND B.BOARD_NUM=1
AND M.MEM_ID=R.MEM_ID;

-- 게시글번호, 게시글제목, 게시글작성자, 게시글 작성일, 게시글 내용
-- 댓글 작성일, 댓글 작성자, 댓글 내용
SELECT B.BOARD_NUM, TITLE, B.MEM_ID AS 게시글작성자, CREATE_DATE,CONTENT
	,REPLY_DATE,R.MEM_ID AS 댓글작성자,REPLY_CONTENT,REPLY_NUM
FROM board B,board_reply R, board_member M
WHERE B.BOARD_NUM=7
AND B.BOARD_NUM=R.BOARD_NUM
AND B.MEM_ID=M.MEM_ID;


SELECT BOARD_NUM
   ,TITLE
   ,MEM_ID
FROM BOARD
WHERE TITLE LIKE CONCAT('%''%')'%%' 
AND MEM_ID LIKE '%hi%';

INSERT INTO board (
   TITLE
   ,CONTENT
   ,MEM_ID
)VALUES (
   '피곤하다'
   ,'눕고싶다'
   ,'kiki'
);


SELECT BOARD_NUM
   ,TITLE
   ,MEM_ID
   ,CREATE_DATE
FROM board
ORDER BY BOARD_NUM DESC
LIMIT 5 OFFSET 5;
-- 전체 데이터 중에 5개 가져올 건데 5개 건너뛰고 가져오는 거 
-- LIMIT 5 OFFSET 0; : 1페이지 
-- LIMIT 5 OFFSET 5; : 2페이지 

-- ORDER BY BOARD_NUM DESC;

-- 테이블에 존재하는 데이터 개수 조회
-- NULL이 포함된 컬럼은...눕고싶다.......NULL은 개수에서 제외함 
SELECT COUNT(BOARD_NUM) AS 피곤하다
FROM board;



CREATE TABLE board_member2 (
	MEM_ID VARCHAR(50) PRIMARY KEY
	, MEM_PW VARCHAR(50) NOT NULL
	, MEM_NAME VARCHAR(50) NOT NULL
	, GENDER VARCHAR(10) 
	, MEM_ROLE VARCHAR(20) DEFAULT 'USER'	
);

SELECT * FROM board_member2;

CREATE TABLE board2 (
	BOARD_NUM INT PRIMARY KEY AUTO_INCREMENT
	,TITLE VARCHAR(50) NOT NULL
	,CONTENT VARCHAR(100)
	,MEM_ID VARCHAR(50) REFERENCES BOARD_MEMBER (MEM_ID) -- 외래키 
	,CREATE_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
);

SELECT * FROM board2;

CREATE TABLE board_reply2 (
	REPLY_NUM INT PRIMARY KEY AUTO_INCREMENT
	,BOARD_NUM INT REFERENCES BOARD (BOARD_NUM) 
	,REPLY_CONTENT VARCHAR(50) NOT NULL
	,MEM_ID VARCHAR(50) REFERENCES BOARD_MEMBER (MEM_ID)
	,REPLY_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
);

SELECT * FROM board_reply2;





CREATE TABLE TEST_ITEM(
	ITEM_CODE INT AUTO_INCREMENT PRIMARY KEY
	, ITEM_NAME VARCHAR(30) NOT NULL
);

INSERT INTO TEST_ITEM VALUES (1,'상품1');
INSERT INTO TEST_ITEM VALUES (2,'상품2');
INSERT INTO TEST_ITEM VALUES (3,'상품3');

SELECT * FROM TEST_ITEM;

CREATE TABLE TEST_ORDER (
	ORDER_NUM INT AUTO_INCREMENT PRIMARY KEY
	, BUYER VARCHAR(50) NOT NULL
	, ITEM_CODE INT NOT NULL REFERENCES TEST_ITEM (ITEM_CODE) ON DELETE CASCADE
);

INSERT INTO TEST_ORDER VALUES (1,'나',1);
INSERT INTO TEST_ORDER VALUES (2,'김나',1);
INSERT INTO TEST_ORDER VALUES (3,'이나',2);
INSERT INTO TEST_ORDER VALUES (4,'나',NULL);

SELECT * FROM TEST_ORDER;

DELETE FROM TEST_ITEM WHERE ITEM_CODE = 1;

DROP TABLE TEST_ORDER;
DROP TABLE TEST_ITEM;
