
-- 환자 정보
CREATE TABLE medical_member(
  MEM_NUM VARCHAR(20) PRIMARY KEY
  ,MEM_NAME VARCHAR(20) NOT NULL
  ,MEM_TEL VARCHAR(50) NOT NULL UNIQUE
  ,MEM_RRN VARCHAR(20) UNIQUE NOT NULL
  ,MEM_ROLE VARCHAR(30) DEFAULT('USER')
);

SELECT * FROM medical_member;

UPDATE medical_member 
SET MEM_TEL = '01022222222'
WHERE MEM_NUM='DOC_00001';


-- 진료과
CREATE TABLE MEDICAL_DEPT(
	DEPT_NUM INT PRIMARY KEY AUTO_INCREMENT
	,DEPT_NAME VARCHAR(30) NOT NULL
);

SELECT * FROM medical_dept;

INSERT INTO medical_dept(DEPT_NUM,DEPT_NAME) VALUES(1,'유방암 외과');
INSERT INTO medical_dept(DEPT_NUM,DEPT_NAME) VALUES(2,'신경외과');
INSERT INTO medical_dept(DEPT_NUM,DEPT_NAME) VALUES(3,'갑상선 외과');
INSERT INTO medical_dept(DEPT_NUM,DEPT_NAME) VALUES(4,'산부인과');
INSERT INTO medical_dept(DEPT_NUM,DEPT_NAME) VALUES(5,'흉부외과');
INSERT INTO medical_dept(DEPT_NUM,DEPT_NAME) VALUES(6,'혈액 종양 내과');




-- 의료진
-- 의료진
CREATE TABLE medical_doctor(
  DOC_NUM VARCHAR(20) PRIMARY KEY 
  ,DOC_NAME VARCHAR(20) NOT NULL
  ,DEPT_NUM INT REFERENCES MEDICAL_DEPT(DEPT_NUM) ON DELETE CASCADE
  ,FOREIGN KEY (DOC_NUM) REFERENCES MEDICAL_MEMBER(MEM_NUM)
);

CREATE TABLE DOCTOR_IMG(
IMG_NUM INT PRIMARY KEY AUTO_INCREMENT
, ORIGIN_FILE_NAME VARCHAR(20)
, ATTACHED_FILE_NAME VARCHAR(20) NOT NULL
, DOC_NUM VARCHAR(20) REFERENCES medical_doctor(DOC_NUM)
);

INSERT INTO medical_doctor(DOC_NUM,DOC_NAME, DEPT_NUM) 
VALUES ('DOC_00003','김현경', 1);
INSERT INTO medical_doctor(DOC_NUM,DOC_NAME, DEPT_NUM) 
VALUES ('DOC_00004','민정흠', 2);
INSERT INTO medical_doctor(DOC_NUM,DOC_NAME, DEPT_NUM) 
VALUES ('DOC_00001','유지현', 3);
INSERT INTO medical_doctor(DOC_NUM,DOC_NAME, DEPT_NUM) 
VALUES ('DOC_00005','서은송', 4);
INSERT INTO medical_doctor(DOC_NUM,DOC_NAME, DEPT_NUM) 
VALUES (11,'김형진', 5);
INSERT INTO medical_doctor(DOC_NUM,DOC_NAME, DEPT_NUM) 
VALUES (12,'김하루', 6);

SELECT * FROM medical_doctor;

SELECT DOC_NAME, DEPT_NAME
FROM medical_dept, medical_doctor
WHERE medical_dept.DEPT_NUM = medical_doctor.DEPT_NUM;

UPDATE medical_doctor
SET DOC_NAME = '정다영'
WHERE DOC_NUM = 12;

INSERT INTO medical_member (
	MEM_NUM
	,MEM_NAME
	,MEM_TEL
	,MEM_RRN
	,MEM_ROLE
)VALUES (
	'DOC_00002'
	,'유지현'
	,'1234'
	,'960423'
	,'ADMIN'
);


-- 예약

-- 테이블 DROP

SELECT * FROM medical_doctor;
SELECT * FROM medical_schedule;
SELECT * FROM medical_dept;


CREATE TABLE medical_schedule(
  SCH_NUM INT PRIMARY KEY AUTO_INCREMENT
  ,DOC_NUM VARCHAR(20) REFERENCES medical_doctor(DOC_NUM) ON DELETE CASCADE
  ,MEM_NUM VARCHAR(20) REFERENCES medical_member(MEM_NUM) ON DELETE CASCADE
  ,DEPT_NUM INT REFERENCES medical_dept(DEPT_NUM) ON DELETE CASCADE -- 진료과 번호 조인
  ,REG_DATE DATETIME DEFAULT CURRENT_TIMESTAMP -- 접수날짜
  ,SCH_DATE DATE NOT NULL -- 예약날짜 년월일
  ,SCH_TIME TIME NOT NULL -- 예약 날짜 시간
  ,DETAIL VARCHAR(100)
  ,SCH_STATUS VARCHAR(10) DEFAULT('Y')  
);

SELECT * FROM medical_schedule; 


SELECT SCH_NUM
       ,SCH_DATE
       ,DOC_NAME
       ,(
		 SELECT DEPT_NAME
		 FROM medical_dept P
		 WHERE D.DEPT_NUM=P.DEPT_NUM
		 ) AS DEPT_NAME
       ,MEM_NAME
       ,DETAIL
       ,SCH_STATUS
FROM MEDICAL_SCHEDULE S,MEDICAL_DOCTOR D,MEDICAL_MEMBER M
WHERE S.DOC_NUM=7
AND S.DOC_NUM=D.DOC_NUM
AND S.MEM_NUM=M.MEM_NUM
ORDER BY SCH_NUM DESC;


-- 환자 상세 페이지 조회 
SELECT SCH_NUM
       ,SCH_DATE
       ,SCH_TIME
       ,D.DOC_NUM
       ,DOC_NAME
       ,(
		 SELECT DEPT_NAME
		 FROM medical_dept P
		 WHERE D.DEPT_NUM=P.DEPT_NUM
		 ) AS DEPT_NAME
		 ,M.MEM_NUM
       ,MEM_NAME
       ,DETAIL
FROM MEDICAL_SCHEDULE S,MEDICAL_DOCTOR D,MEDICAL_MEMBER M
WHERE S.MEM_NUM='11'
AND S.DOC_NUM=D.DOC_NUM
AND S.MEM_NUM=M.MEM_NUM;

-- 환자 정보 수정
UPDATE medical_schedule 
SET SCH_DATE='2024-08-17'
	,SCH_TIME='15:00'
	,DETAIL='응애'
	,DOC_NUM=8
	,DEPT_NUM=2
WHERE MEM_NUM='11';


-- 게시판
CREATE TABLE USER_BOARD(
BOARD_NUM INT AUTO_INCREMENT PRIMARY KEY
, TITLE VARCHAR(20) NOT NULL
, WRITER VARCHAR(10) NOT NULL
, CONTENT VARCHAR(1000) NOT NULL
, CREATE_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
, MEM_NUM VARCHAR(20) REFERENCES medical_member(MEM_NUM)
);


SELECT SCH_TIME
        FROM medical_schedule
        WHERE DEPT_NUM = 6
        AND SCH_DATE = '2024-09-27';
        
        SELECT *
        FROM medical_schedule
        WHERE DEPT_NUM = 6;


GRANT ALL PRIVILEGES ON *.* TO 'team_mediclick'@'192.168.%' IDENTIFIED BY 'mariadb';

CREATE TABLE TEMP_DATA (
	TEMP_NUM INT AUTO_INCREMENT PRIMARY KEY,
	CURRENT_TEMP DOUBLE,
	TEMP_TIME DATETIME DEFAULT CURRENT_TIMESTAMP()
);

DROP TABLE test;
DROP TABLE TEMP_DATA;

SELECT * FROM test;
SELECT * FROM TEMP_DATA ORDER BY TEMP_TIME DESC;

insert into TEMP_DATA (CURRENT_TEMP) 
values (%s);

DELETE FROM TEMP_DATA
WHERE temp_time < NOW() - INTERVAL 1 DAY;

SELECT * FROM temp_data;

select current_temp 
from temp_data
ORDER BY temp_time desc 
LIMIT 1; 


-- ---------------수주 

-- 거래처
CREATE TABLE CUSTOMERS(
        CUSTOMER_NUM INT AUTO_INCREMENT PRIMARY KEY
        , CUSTOMER_NAME VARCHAR(100) NOT NULL UNIQUE
        , CUSTOMER_OWNER VARCHAR(50) NOT NULL 
        , BUSINESS_NUMBER VARCHAR(100) NOT NULL
        , CUSTOMER_ADDR VARCHAR(200) NOT NULL
        , CUSTOMER_TEL VARCHAR(50) NOT NULL
        , CUSTOMER_EMAIL VARCHAR(50) UNIQUE
);

SELECT * FROM customers;

-- 카테고리
CREATE TABLE CATEGORY(
        CATE_NUM INT AUTO_INCREMENT PRIMARY KEY
        , CATE_NAME VARCHAR(100) NOT NULL UNIQUE
);

INSERT INTO CATEGORY (CATE_NAME)
VALUES ('약');

SELECT * FROM CATEGORY;

-- 상품정보
CREATE TABLE products(
  PRODUCT_NUM INT AUTO_INCREMENT PRIMARY KEY
  , PRODUCT_NAME VARCHAR(100) NOT NULL 
  , CATE_NUM INT REFERENCES CATEGORY(CATE_NUM) ON DELETE CASCADE
  , PRODUCT_PRICE INT NOT NULL
  , STOCK INT NOT NULL 
  , DETAIL VARCHAR(300)
);

INSERT INTO PRODUCTS (
	PRODUCT_NAME,CATE_NUM,PRODUCT_PRICE,STOCK
) VALUES ('타이레놀','3','3000','100');

SELECT * FROM products;

DELETE FROM products WHERE PRODUCT_NUM=5;


-- 상품 이미지
CREATE TABLE item_img (
	IMG_CODE INT AUTO_INCREMENT PRIMARY KEY
	, ORIGIN_FILE_NAME VARCHAR(100) NOT NULL
	, ATTACHED_FILE_NAME VARCHAR(100) NOT NULL
	, PRODUCT_NUM INT REFERENCES PRODUCTS (PRODUCT_NUM ) ON DELETE CASCADE
);


SELECT R.REQUEST_NUM,
   P.CATE_NUM,
   C.CATE_NAME,
   P.PRODUCT_NUM,
   P.PRODUCT_NAME,
   P.DETAIL,
   R.QUANTITY,
   P.PRODUCT_PRICE,
   DATE_FORMAT(REQUEST_DATE,'%Y-%m-%d') AS REQUEST_DATE,
   R.REQUEST_STATUS
FROM ORDER_REQUESTS R, PRODUCTS P, CATEGORY C
WHERE P.PRODUCT_NUM=R.PRODUCT_NUM
AND P.CATE_NUM=C.CATE_NUM
ORDER BY REQUEST_NUM DESC;


-- 재고 테이블
CREATE TABLE INVENTORY(
INVENTORY_NUM INT AUTO_INCREMENT PRIMARY KEY
, CATE_NUM INT REFERENCES category(CATE_NUM) ON DELETE CASCADE
, PRODUCT_NUM INT REFERENCES products(PRODUCT_NUM) ON DELETE CASCADE
, PRODUCT_NAME VARCHAR(100) NOT NULL
, STOCK_DATE DATETIME DEFAULT CURRENT_TIMESTAMP -- 입고 일자
, OUT_DATE DATETIME -- 출고 일자
, INITIAL_STOCK INT NOT NULL -- 최초 재고
, INCOMING_QTY INT NOT NULL -- 입고 수량
, OUTGOING_QTY INT NOT NULL -- 출고 수량
, CURRENT_STOCK INT -- 현재 수량 20241008에 추가했어요~ 
);

SELECT * FROM inventory;


INSERT INTO inventory (
	PRODUCT_NUM
	,PRODUCT_NAME
	,CATE_NUM
	,STOCK_DATE
	,INITIAL_STOCK
	,INCOMING_QTY
	,OUTGOING_QTY
	,CURRENT_STOCK
) VALUES(
	8
	,'가타모티정'
	,3
	,NOW()
	,100
	,0
	,0
	,100
);

UPDATE INVENTORY 
SET CURRENT_STOCK=10000
WHERE PRODUCT_NUM=5;

-- 발주
CREATE TABLE ORDER_REQUESTS(
 REQUEST_NUM INT AUTO_INCREMENT PRIMARY KEY
 , PRODUCT_NUM INT REFERENCES PRODUCTS(PRODUCT_NUM) ON DELETE CASCADE
 , CUSTOMER_NUM INT REFERENCES CUSTOMERS(CUSTOMER_NUM) ON DELETE CASCADE
 , QUANTITY INT NOT NULLorder_orderRequest
 ,	REQUEST_STATUS ENUM('배송대기','배송완료', '주문취소') NOT NULL DEFAULT '배송대기'
 , REQUEST_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
);


SELECT * FROM order_requests
ORDER BY request_num DESC;

ALTER TABLE ORDER_REQUESTS
MODIFY REQUEST_STATUS ENUM('배송대기', '배송완료', '주문취소', '배송중') NOT NULL DEFAULT '배송대기';


-- 결제
CREATE TABLE PAYMENTS(
 PAYMENT_NUM INT AUTO_INCREMENT PRIMARY KEY
 , REQUEST_NUM INT REFERENCES ORDER_REQUESTS(REQUEST_NUM) ON DELETE CASCADE
 , PAYMENT_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
 , AMOUNT INT NOT NULL 
 , PAYMENT_METHOD VARCHAR(100) NOT NULL 
 , PAYMENT_STATUS ENUM('결제대기', '결제완료', '결제취소') NOT NULL DEFAULT '결제완료'
);



SELECT * FROM orders ORDER BY ORDER_NUM desc;

UPDATE inventory 
SET outgoing_qty = 10,
	out_date=NOW(),
	current_stock=current_stock - 10
WHERE product_num=5;

SELECT * FROM ORDERS;


UPDATE ORDERS
SET ORDER_STATUS='배송완료'
WHERE ORDER_NUM=9;

DELETE FROM orders WHERE order_status!='배송대기';
DELETE FROM order_requests WHERE request_status!='배송대기';

DROP TABLE ORDERS;
DROP TABLE DELIVERY;
-- 수주
CREATE TABLE ORDERS(
 ORDER_NUM INT AUTO_INCREMENT PRIMARY KEY
 , REQUEST_NUM INT REFERENCES ORDER_REQUESTS(REQUEST_NUM) ON DELETE CASCADE
 , ORDER_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
 , ORDER_STATUS ENUM('배송대기', '배송중', '배송완료', '주문취소') NOT NULL DEFAULT '배송대기'
 , DELIVERY_START_TIME DATETIME NULL  -- 출발
 , DELIVERY_END_TIME DATETIME NULL  -- 도착
 , DELIVERY_NUM INT REFERENCES delivery(DELIVERY_NUM) ON DELETE CASCADE
);
-- 배송
CREATE TABLE DELIVERY(
    DELIVERY_NUM INT AUTO_INCREMENT PRIMARY KEY,
         DELIVERY_DRIVER_NAME VARCHAR(100) NOT NULL, -- 기사이름
    DELIVERY_DRIVER_PHONE VARCHAR(20) NOT NULL, -- 기사 번호
    DELIVERY_STATUS ENUM('배송대기', '배송중', '배송완료','배송취소', '반품') NOT NULL DEFAULT '배송대기' -- 배송 상태
);

SELECT * FROM delivery;



SELECT
ORDER_NUM
,O.REQUEST_NUM
,ORDER_DATE
,ORDER_STATUS
,C.CUSTOMER_NUM
,C.CUSTOMER_NAME
, SUM((R.QUANTITY * P.PRODUCT_PRICE)) as TOTALPRICE
,P.PRODUCT_NUM
FROM order_requests R, orders O , customers C, products P
WHERE O.REQUEST_NUM = R.REQUEST_NUM
AND R.CUSTOMER_NUM = C.CUSTOMER_NUM
AND R.PRODUCT_NUM = P.PRODUCT_NUM
AND O.ORDER_STATUS = '배송대기'
GROUP BY C.CUSTOMER_NUM
ORDER BY R.REQUEST_NUM DESC;



-- 트리거 insert (거래처>공급사)
CREATE TRIGGER order_orderRequest
	AFTER INSERT
	ON ORDER_REQUESTS
	FOR EACH ROW
INSERT INTO ORDERS (REQUEST_NUM, ORDER_DATE, ORDER_STATUS)
VALUES (NEW.REQUEST_NUM, NOW(), '배송대기');

-- 트리거 UPDATE 주문취소 (거래처>공급사)
DELIMITER //

CREATE TRIGGER order_orderRequest_update
	AFTER UPDATE
	ON ORDER_REQUESTS
	FOR EACH ROW
BEGIN
	IF NEW.REQUEST_STATUS='주문취소' THEN
		UPDATE orders 
		SET ORDER_STATUS='주문취소'
		WHERE REQUEST_NUM=NEW.REQUEST_NUM;
	END IF;
END; // 

DELIMITER;

DROP TRIGGER order_orderRequest_update;


-- 트리거 UPDATE 배송완료 (공급사>거래처)
DELIMITER //

CREATE TRIGGER order_orderRequest_update_cancel
AFTER UPDATE
ON ORDERS
FOR EACH ROW
BEGIN
	IF NEW.ORDER_STATUS = '배송완료' THEN
		UPDATE order_requests 
		SET REQUEST_STATUS = '배송완료'
		WHERE REQUEST_NUM = NEW.REQUEST_NUM;
	END IF;
END; //

DELIMITER ;

DROP TRIGGER order_orderRequest_update_del;


-- 트리거 UPDATE 배송중 (공급사>거래처)
DELIMITER //

CREATE TRIGGER order_orderRequest_update_ing
AFTER UPDATE
ON ORDERS
FOR EACH ROW
BEGIN
	IF NEW.ORDER_STATUS = '배송중' THEN
		UPDATE order_requests 
		SET REQUEST_STATUS = '배송중'
		WHERE REQUEST_NUM = NEW.REQUEST_NUM;
	END IF;
END; //

DELIMITER ;


CREATE TRIGGER AFTER_INSERT_PRODUCTS
AFTER INSERT ON PRODUCTS
FOR EACH ROW
INSERT INTO INVENTORY (
       CATE_NUM, 
       PRODUCT_NUM, 
       PRODUCT_NAME, 
       STOCK_DATE,
       INITIAL_STOCK, 
       INCOMING_QTY, 
       OUTGOING_QTY, 
       CURRENT_STOCK
   ) VALUES (
       NEW.CATE_NUM,          
       NEW.PRODUCT_NUM,       
       NEW.PRODUCT_NAME,      
       NOW(),           
       NEW.STOCK,             
       NEW.STOCK,             
       0,                     
       NEW.STOCK              
   );



-- 트리거 UPDATE 주문취소 (공급사>거래처) ㄴㄴ
CREATE TRIGGER order_orderRequest_update_cancel
	AFTER UPDATE
	ON ORDERS
	FOR EACH ROW
UPDATE order_requests 
SET REQUEST_STATUS='주문취소'
WHERE REQUEST_NUM=NEW.REQUEST_NUM
AND NEW.ORDER_STATUS='주문취소';

DROP TRIGGER order_orderRequest_update_cancel;



SELECT SUM(R.QUANTITY*P.PRODUCT_PRICE)
FROM ORDER_REQUESTS R, ORDERS O, CUSTOMERS C, PRODUCTS P
WHERE O.REQUEST_NUM=R.REQUEST_NUM
AND R.CUSTOMER_NUM=C.CUSTOMER_NUM
AND R.PRODUCT_NUM=P.PRODUCT_NUM
AND ORDER_DATE='2024-10-18 17:03:12'
AND R.CUSTOMER_NUM=1;

