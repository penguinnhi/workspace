눈딱감고낙하아아
하아ㅏㅏ
하ㅏㅏㅏ

스프링의 지향점 🙄🤔🥱😫☹😩😬🤓😾🦧 
- 클래스 간 결합도는 낮추고, 한 클래스의 응집도는 높인다 
	-> 좋은(유지보수) 프로그램이다 
- 결합도를 낮추기 위해서 🌟 IOC, DI 🌟  개념을 도입
- 응집도를 높이기 위해서 AOP 개념을 도입


* IOC, DI 개념
IOC(Inversion Of Control) : 제어의 역전 <생성할 때>
	ㄴ 객체를 생성하는 주체가 개발자에서 스프링으로 변경됨을 이야기함
	(개발자가 제어하던 거를 스프링이 알아서 해준다~)

-> 그럼 개발자가.. 객체 생성을 하지 않고 스프링이 객체를 생성해준다면
 스프링은 어떤 방식으로 객체를 생성하는가
이게 왜궁금함? 스프링이 알아서하겠지 
아 그 방식이 ↓ DI라는거임 

DI(Dependency Injection) : 의존성 주입
	ㄴ 스프링이 객체를 생성할 때 의존성 주입이라는 방식을 통해 객체를 생성 
	ㄴ IOC를 통해 자동으로 생성된 객체를 개발자가 사용할 때 진행되는 방식 

 * 스프링이 자동으로 객체를 생성하도록 코드를 작성하는 방법 *
1. 객체를 자동으로 생성하고 싶은 클래스는 반드시 프로젝트의 기본 패키지 안에 생성해야함 / 기본패키지가 뭔데 기본패키지가 아닌 패키지도 있는거임? ?
(기본 패키지 안에 있다고해서 객체가 자동으로 생성되는 것은 아님. 만들어지기위한 조건임)
2. 클래스 위에 어노테이션을 사용해서 클래스의 객체를
  프로젝트가 시작되자마자 (런 누르면) 자동으로 생성가능 
  클래스 위에 선언하여 객체를 생성해주는 어노테이션 
	@Component (객체만들겠습니다 라는 옛날방식)
	@Controller / @Service / @Repository (객체만들기+역할이 있음)
	
대박 화장실가고싶다 

그럼 스프링이 자동으로 생성해준 객체를 우리가 어떻게 써야할가 몰루 
ㄴ 이게 DI
 - 어노테이션을 사용하여 스프링이 자동 생성해준 객체를 우리가 사용가능
 - 아래 두 어노테이션은 생성된 객체를 사용할 때 사용하며, 멤버변수 위에 작성한다
	ㄴ @Autowired : 생성된 객체의 자료형을 비교하여 생성된 객체를 사용함
	ㄴ @Resource : 생성된 객체의 이름을 비교하여 생성된 객체를 사용함 


객체 생성과 생성된 객체를 사용하는 예시 1
@Component
class Aaa{} => Aaa aaa=new Aaa(); 
dcoding 폰트 똑똑하네 

@Service("b")
class Bbb{} => Bbb b=new Bbb();

class Ccc{
  @Autowired
  private Aaa a; => Aaa a=aaa; // class Aaa에 있는 자료형과 동일하기때문에 aaa를 가져옴

}

할아버지 할머니 어렸을 적에 신으셨던? 추억의? 검정 고무신 
엄마 


예시 2
@Component
class Animal{}

@Component
class Dog extends Animal{} => Dog dog=new Dog();

@Component
class Cat extends Animal{} => Cat cat=new Cat();

class AnimalHouse{
  @Resource (name="dog")
  private Animal a;

  @Autowired
  private Dog d;
}

예시3

interface BoardService{}

@Service("boardService")훌륭합니다
class BoardServiceImpl implements BoardService{}
	->BoardServiceImpl boardService = new BoardServiceImpl();

@Service
class MyBoard implements BoardService{}
	->MyBoard myboard = new MyBoard();

@Component
class SqlSession{} -> SqlSession sqlSession = new SqlSession();



class BoardController{
  @Resource(name="boardService"/name="myBoard")
  private BoardService boardService; //어이없어 클래스 아니고 인터페이스임 
  @Autowired // @Resource(name="sqlSession")
  private SqlSession sqlSession;

}







